/*
3. 생성자
1) 생성자와 객체로 생성하기
클래스가 도입되기 전의 자바 스크립트는 '생성자라고 하는 함수'로 객체를 생성할 수 있음.
 */

function Card(suit, rank) {
    this.suit = suit;
    this.rank = rank;
}

// 생성자 함수로 객체를 생성할 때는 new 연산자를 사용.
const card2 = new Card('하트', 'A');

/*
이 코드를 실행하면 suit 프로퍼티에는 '하트', rank 프로퍼티에는 'A'라는 값이 저장된 객체에 생성되고,
마지막으로 그 객체의 참조가 변수 card에 할당.

이때 Card 생성자 함수로 생성한 객체를 Card 객체라고 부름.
console.log로 객체를 출력하면 생성자 이름이 표시.
 */
console.log(card2);

/*
위의 예처럼 new 연산자로 객체를 생성할 것이라 기대하고 만든 함수를 생성자라고 부름.
생성자 이름은 관례적으로 생성자임을 알리기 위해 첫 글자를 대문자로 쓰는 파스칼 표기법을 사용.
생서자 안에서 this.프로퍼티 이름에 값을 대입하면 그 이름을 가진 프로퍼티에 값이 할당된 객체가 생성됨.
이때 this는 생성자가 생성하는 객체를 가르킴.

생성자와 new 연산자로 생성한 객체를 그 생성자의 인스턴스라고 부름.
인스턴스는 실체라는 뜻이 있음. 객체 지향 언어에는 인스턴스는 클래스로 생성한 실체를 뜻함.
이때 클래스는 객체를 만들기 위한 설계도로 생성한 실체가 바로 인스턴스.

클래스가 아닌 생성자 함수 객체라는 실체. 따라서 생성자 함수로 생성한 객체는 엄밀히 말해 인스턴스가 아님.
하지만 생성자가 클래스처럼 객체를 생성하는 역할을 담당하고 있으므로, 생성자로 생성한 객체도 인스턴스라고 부르는 것이 관례.

b) 생성자의 역할
생성자는 1) 객체를 생성하고 2) 초기화하는 역할을 함.
생성자를 사용하면 이름은 같지만 프로퍼티 값이 다른 객체(인스턴스) 여러개를 간단히 생성할 수 있음.
 */
const card1 = new Card('하트', 'A');
const card2 = new Card('클럽', 'K');
const card3 = new Card('스페이드', '2');

/*
이처럼 생성자를 사용하면 이름은 같지만 프로퍼티 값이 다른 객체 여러 개를 효율적으로 생성할 수 있음.

생성자는 함수이므로 프로퍼티에 값을 대입할 수 있음.
다른 함수와 마찬가지로 다양한 처리를 할 수도 있음. 이를 활용하면 객체를 생성할 때 초기화 작업을 병행할 수 있음.
 */