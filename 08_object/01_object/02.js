/*
2. 객체 리터널
1) 객체 리터널로 객체 생성하기
트럼프 카드의 정보를 객체 리터널로 표현
 */

const card = {suit: '하트', rank: 'A'};

/*
{...} 부분이 바로 객체 리터널.
프로퍼티 이름과 프로퍼티 값은 suit: '하트'처럼 콜론(:)을 사용해서 구분하며, 중괄호({})안에 있는 프로퍼티들은 쉼표(,)로 구분.
프로퍼티 이름으로는 모든 식별자와 문자열 리터널(빈 문자열도 사용 가능)을 사용할 수 있음.
즉 위의 코드에 있는 프로퍼티 이름은 문자열로 바꾸어 작성할 수 있음.
 */
const card2 = {'suit': '하트', 'rank': 'A'};

console.log(card2.suit); // 마침표 다음에 문자열이 아닌 점
console.log(card2["suit"]); // 대괄호 안은 문자열로 채워져 있음.

/*
객체에 없는 프로퍼티를 읽으려고 시도하면 undefined를 반환.
선언되지 않은 변수를 읽으려고 시도하면 참조 오류가 발생하는 것과 대조적.
 */
console.log(card2.color); // undefined

/*
객체 리터널 안에 어떠한 프로퍼티도 작성하지 않으면 빈 객체가 생성.
 */
const obj = {}
console.log(obj); // {}

/*
2) 프로퍼티 추가와 삭제

없는 프로퍼티 이름에 값을 대입하면 새로운 프로퍼티가 추가.
 */
card2.value = 10;
console.log(card2); // { suit: '하트', rank: 'A', value: 10 }

/*
delete 연산자를 사용하면 프로퍼티를 삭제할 수 있음.
 */
delete card2.rank;
console.log(card2); // { suit: '하트', value: 10 }
/*
자바 스크립트의 객체는 실행 중에 프로퍼티를 자유롭게 추가하거나 삭제할 수 있음.
반면 Java와 C++ 등에서는 객체의 프로퍼티를 실행 중에 추가하거나 삭제할 수 없음.
 */

/*
3) in 연산자로 프로퍼티가 있는지 확인하기
in 연산자를 사용하면 객체에 특정 프로퍼티가 있는지 확인할 수 있음.
코드를 다음과 같이 작성하면 프로퍼티가 객체에 포함되었을 때는 true를 반환하고 포함되지 않았을 때는 false를 반환.

프로퍼티 이름을 뜻하는 문자열 in 객체명
 */
console.log('suit' in card);
console.log('color' in card);

/*
4) 메서드
프로퍼티에 저장된 값이 함수면 그 프로퍼티를 메서드라 부름.

5) 객체는 참조 타입
생성된 객체는 메모리의 영역을 차지하는 한 덩어리가 됨.
 */

const a = card;

/*
변수 a가 card 객체를 참조하게 되므로 a로 card 객체를 읽거나 수정할 수 있음.
 */
console.log(a.suit); // 하트

a.suit = '스페이드';
console.log(a.suit); // 스페이드
console.log(card.suit); // 스페이드